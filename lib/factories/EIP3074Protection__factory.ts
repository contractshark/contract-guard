/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EIP3074Protection,
  EIP3074ProtectionInterface,
} from "../EIP3074Protection";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "txgas",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    name: "GasInfo",
    type: "event",
  },
];

const _bytecode =
  "0x608060405260008060006101000a81548160ff021916908315150217905550348015602957600080fd5b5060168060376000396000f3fe6080604052600080fdfea164736f6c6343000804000a";

export class EIP3074Protection__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EIP3074Protection> {
    return super.deploy(overrides || {}) as Promise<EIP3074Protection>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EIP3074Protection {
    return super.attach(address) as EIP3074Protection;
  }
  connect(signer: Signer): EIP3074Protection__factory {
    return super.connect(signer) as EIP3074Protection__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EIP3074ProtectionInterface {
    return new utils.Interface(_abi) as EIP3074ProtectionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EIP3074Protection {
    return new Contract(address, _abi, signerOrProvider) as EIP3074Protection;
  }
}
